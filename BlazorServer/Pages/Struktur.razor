@page "/struktur"

@using DataLibrary
@using Microsoft.AspNetCore.WebUtilities
@using BlazorServer.Models
@using Microsoft.Extensions.Configuration
@inject IConfiguration _config
@inject NavigationManager UriHelper
@inject IDataAccess _data


<h3>Strukturen</h3>


@if (strukturen == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <style>
        table {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

        td, th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: #dddddd;
        }
    </style>
    <br />
    <ul>
        <li>Schema: @querySchema</li>
        <li>Tabelle: @queryTabelle</li>
    </ul>
    <br />
    <table>
        <tr>
            <th>Spaltenname</th>
            <th>Datentyp</th>
            <th>Nullable</th>
            <th>Key</th>
            <th>Extra</th>

        </tr>
        @foreach (var s in strukturen)
        {
            <tr>
                <td>
                    @s.column_name
                </td>
                <td>
                    @s.column_type
                </td>
                <td>
                    @s.is_nullable
                </td>
                <td>
                    @s.column_key
                </td>
                <td>
                    @s.extra
                </td>
            </tr>
        }
    </table>
    <br />

    <h4>Foreign Key Constraints</h4>
    <br />
    <table>
        <tr>
            <th>Tabelle</th>
            <th>Spalte</th>
            <th>Foreign Key Constraint</th>
            <th>Referenzierte Tabelle</th>
            <th>Referenzierte Spalte</th>
            <th>Updateregel</th>
            <th>Löschregel</th>

        </tr>
        @foreach (var f in fremdschlüssel)
        {
    <tr>
        <td>
            @f.table_name
        </td>
        <td>
            @f.column_name
        </td>
        <td>
            @f.constraint_name
        </td>
        <td>
            @f.referenced_table_name
        </td>
        <td>
            @f.referenced_column_Name
        </td>
        <td>
            @f.update_rule
        </td>
        <td>
            @f.delete_rule
        </td>
    </tr>
        }
    </table>

}

@code {

    List<TabellenStrukturModel> strukturen;
    List<ForeignKeyConstraintModel> fremdschlüssel;


    private string querySchema;
    private string queryTabelle;



    private async Task LoadAllData(string schema, string table)
    {
        string sql1 = "SELECT *" +
                " FROM INFORMATION_SCHEMA.COLUMNS " +
                "WHERE(table_schema = @table_schema and table_name = @table_name) " +
                "order by ordinal_position";

        string sql2 = "SELECT tb1.CONSTRAINT_NAME, tb1.TABLE_NAME, tb1.COLUMN_NAME, " +
                "tb1.REFERENCED_TABLE_NAME, tb1.REFERENCED_COLUMN_NAME, tb2.MATCH_OPTION, " +
                "tb2.UPDATE_RULE, tb2.DELETE_RULE " +
                "FROM information_schema.KEY_COLUMN_USAGE AS tb1 INNER JOIN information_schema.REFERENTIAL_CONSTRAINTS AS tb2 ON " +
                "tb1.CONSTRAINT_NAME = tb2.CONSTRAINT_NAME " +
                "WHERE tb1.REFERENCED_TABLE_SCHEMA = @table_schema AND(tb1.REFERENCED_TABLE_NAME = @table_name OR tb1.table_name = @table_name)";


        strukturen = await _data.LoadData<TabellenStrukturModel, dynamic>(sql1, new { table_schema = schema, table_name = table }, _config.GetConnectionString("default"));
        fremdschlüssel = await _data.LoadData<ForeignKeyConstraintModel, dynamic>(sql2, new { table_schema = schema, table_name = table }, _config.GetConnectionString("default"));
    }

    protected override async Task OnInitializedAsync()
    {

        var uri = UriHelper.ToAbsoluteUri(UriHelper.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Schema", out var param))
        {
            querySchema = param.First();
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Tabelle", out param))
        {
            queryTabelle = param.First();
        }



        await LoadAllData(querySchema, queryTabelle);
    }
}
